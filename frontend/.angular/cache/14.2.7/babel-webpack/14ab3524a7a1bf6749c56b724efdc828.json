{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/auth.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\n\nfunction EditTaskComponent_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const employee_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", employee_r2.employeeId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", employee_r2.firstname, \" \", employee_r2.lastname, \"\");\n  }\n}\n\nexport let EditTaskComponent = /*#__PURE__*/(() => {\n  class EditTaskComponent {\n    constructor(_api, _router, _activatedRoute, _auth) {\n      this._api = _api;\n      this._router = _router;\n      this._activatedRoute = _activatedRoute;\n      this._auth = _auth;\n      this.taskId = '';\n      this.isLogin = false;\n      this.employees = [];\n      this.showMsg = false;\n      this.msg = '';\n      this.taskDescription = '';\n      this.taskAssignedTo = '';\n      this.taskRepeatAfter = 0;\n      this.taskEquipmentName = '';\n      this.taskEquipmentNumber = '';\n      this.taskDate = '';\n      this.taskEstCompletionTime = '';\n    }\n\n    ngOnInit() {\n      this.taskId = history.state[0];\n      console.log(this.taskId);\n      this.isUserLogin();\n      this.populateForm();\n    }\n\n    isUserLogin() {\n      if (this._auth.getUserDetails() != null) {\n        this.isLogin = true;\n        this.getEmployees();\n      } else {\n        this._router.navigate(['login']);\n      }\n    }\n\n    populateForm() {\n      this._api.postTypeRequest('tasks/get-task-by-id', {\n        taskId: this.taskId\n      }).subscribe(res => {\n        console.log(res);\n\n        if (res.status) {\n          this.taskDescription = res.data[0].description;\n          this.taskAssignedTo = res.data[0].employeeId;\n          this.taskRepeatAfter = res.data[0].repeatAfter;\n          this.taskEquipmentName = res.data[0].equipmentName;\n          this.taskEquipmentNumber = res.data[0].equipmentNumber;\n          this.taskDate = res.data[0].dateDue.slice(0, 10);\n          this.taskEstCompletionTime = res.data[0].estCompletionTime;\n          console.log(this.taskDescription + \" \" + this.taskAssignedTo + \" \" + this.taskRepeatAfter + \" \" + this.taskEquipmentName + \" \" + this.taskEquipmentNumber + \" \" + this.taskDate + \" \" + this.taskEstCompletionTime);\n        } else {\n          this.msg = 'Error while fetching task details';\n          this.showMsg = true;\n        }\n      });\n    }\n\n    getEmployees() {\n      this._api.getTypeRequest('user/get-all-employees').subscribe(res => {\n        console.log(res);\n\n        if (res.status) {\n          this.employees = res.data;\n        } else {\n          this.employees = [];\n        }\n      });\n    }\n\n    employeeChange(event) {\n      console.log(event.value);\n    }\n\n    onSubmit(form) {\n      console.log('Edit task form data: ', form.value);\n\n      let currentEmployeeId = this._auth.getUserId();\n\n      this._api.postTypeRequest('tasks/update', {\n        data: form.value,\n        id: this.taskId,\n        employee: currentEmployeeId\n      }).subscribe(res => {\n        console.log(res);\n\n        if (res.status) {\n          this.msg = 'Task updated successfully';\n          this.showMsg = true;\n          form.reset();\n        } else {\n          this.msg = 'Error while updating task';\n          this.showMsg = true;\n        }\n      });\n    }\n\n  }\n\n  EditTaskComponent.ɵfac = function EditTaskComponent_Factory(t) {\n    return new (t || EditTaskComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.AuthService));\n  };\n\n  EditTaskComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditTaskComponent,\n    selectors: [[\"app-edit-task\"]],\n    decls: 39,\n    vars: 8,\n    consts: [[\"id\", \"editTaskDiv\"], [1, \"text-center\", \"pt-5\"], [3, \"ngSubmit\"], [\"editTaskForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"description\"], [\"id\", \"description\", \"rows\", \"3\", \"name\", \"description\", 1, \"form-control\", \"mb-3\", 3, \"ngModel\"], [\"for\", \"assignedTo\"], [\"id\", \"assignedTo\", \"name\", \"assignedTo\", 1, \"form-control\", \"mb-3\", 3, \"ngModel\", \"change\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"repeatAfter\"], [\"type\", \"number\", \"id\", \"repeatAfter\", \"name\", \"repeatAfter\", 1, \"form-control\", \"mb-3\", 3, \"ngModel\"], [\"for\", \"equipmentName\"], [\"type\", \"text\", \"id\", \"equipmentName\", \"name\", \"equipmentName\", \"disabled\", \"true\", 1, \"form-control\", \"mb-3\", 3, \"ngModel\"], [\"for\", \"equipmentNumber\"], [\"type\", \"text\", \"id\", \"equipmentNumber\", \"name\", \"equipmentNumber\", \"disabled\", \"true\", 1, \"form-control\", \"mb-3\", 3, \"ngModel\"], [\"for\", \"sechduleFor\"], [\"type\", \"date\", \"id\", \"sechduleFor\", \"name\", \"scheduleFor\", 1, \"form-control\", \"mb-3\", 3, \"ngModel\"], [\"for\", \"estCompletionTime\"], [\"type\", \"number\", \"id\", \"estCompletionTime\", \"name\", \"estCompletionTime\", 1, \"form-control\", \"mb-3\", 3, \"ngModel\"], [1, \"text-center\", \"py-3\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [3, \"value\"]],\n    template: function EditTaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r3 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n        i0.ɵɵtext(2, \"Edit Task\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2, 3);\n        i0.ɵɵlistener(\"ngSubmit\", function EditTaskComponent_Template_form_ngSubmit_3_listener() {\n          i0.ɵɵrestoreView(_r3);\n\n          const _r0 = i0.ɵɵreference(4);\n\n          return i0.ɵɵresetView(ctx.onSubmit(_r0));\n        });\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Task Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"textarea\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"label\", 7);\n        i0.ɵɵtext(11, \"Assigned To\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"select\", 8);\n        i0.ɵɵlistener(\"change\", function EditTaskComponent_Template_select_change_12_listener($event) {\n          return ctx.employeeChange($event.target);\n        });\n        i0.ɵɵelementStart(13, \"option\", 9);\n        i0.ɵɵtext(14, \"Select an employee\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, EditTaskComponent_option_15_Template, 2, 3, \"option\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 4)(17, \"label\", 11);\n        i0.ɵɵtext(18, \"Repeat After (days)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 4)(21, \"label\", 13);\n        i0.ɵɵtext(22, \"Equipment Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"input\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 4)(25, \"label\", 15);\n        i0.ɵɵtext(26, \"Equipment Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"input\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 4)(29, \"label\", 17);\n        i0.ɵɵtext(30, \"Schedule For\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(31, \"input\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 4)(33, \"label\", 19);\n        i0.ɵɵtext(34, \"Estimated Completion Time (minutes)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"div\", 21)(37, \"button\", 22);\n        i0.ɵɵtext(38, \"Update\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.taskDescription);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.taskAssignedTo);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.employees);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.taskRepeatAfter);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.taskEquipmentName);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.taskEquipmentNumber);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.taskDate);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.taskEstCompletionTime);\n      }\n    },\n    dependencies: [i4.NgForOf, i5.ɵNgNoValidate, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.DefaultValueAccessor, i5.NumberValueAccessor, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.NgModel, i5.NgForm],\n    styles: [\"#editTaskDiv[_ngcontent-%COMP%]{color:#fff}#editTaskDiv[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin:5% 30%}#editTaskDiv[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{margin-bottom:10px}\"]\n  });\n  return EditTaskComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}